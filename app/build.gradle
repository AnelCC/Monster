apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.anelcc.monster"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // KTN Android Components navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'

    // KTX
    implementation 'androidx.core:core-ktx:1.0.1'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"

    // This container view models and data
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //add the retrofit2 dependencies
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    // This container view models and data
    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.9.2'

    //Coroutines: Web service calls in Android have to be made asynchronously and they have to be done in background threads.
    // Web service calls in Android are asynchronous that is you have to set up the call
    // and then respond in some fashion when the response comes back.
    // The web request and response must be handled in background threads.
    // In the past, Android developers had a variety of ways to work with background threads,
    // but there's a new way using coroutines a feature of the kotlin language.
}
